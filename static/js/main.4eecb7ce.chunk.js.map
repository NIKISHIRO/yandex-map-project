{"version":3,"sources":["serviceWorker.ts","actions/orderActions.ts","reducers/orderReducer.ts","reducers/index.ts","config/store.ts","components/Order/SelectCrew/index.tsx","components/Order/OrderService.ts","components/Order/Crews/index.tsx","components/Order/OrderMap/index.tsx","components/Order/index.tsx","App.tsx","components/Root/index.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","setSelectCrew","crewInfo","dispatch","type","setCrewsInfo","crewsInfo","orderFormChange","name","value","setPlacemarkPos","position","data","text","color","initialState","form","address","isValid","map","clickPlacemark","selectCrew","orderReudcer","state","action","store","createStore","combineReducers","order","compose","applyMiddleware","thunk","logger","cssSelectCrew","border","padding","minWidth","cssSelectCrewLeft","marginRight","display","cssSelectCrewRight","verticalAlign","cssSelectCrewTitle","fontWeight","marginBottom","cssSelectCrewColor","fontSize","cssSelectCrewNumber","borderRadius","SelectCrew","title","number","className","style","getCrewsData","a","Promise","res","rej","findCrews","source_time","Date","now","addresses","lat","lon","getAddressString","geoObject","premise","getPremise","premiseNumber","getPremiseNumber","thoroughfare","getThoroughfare","filter","join","getAddress","ymaps","geocode","result","firstGeoObject","geoObjects","get","addressStr","cssOrderCrews","height","overflowY","cssOrderCrew","isHover","cursor","borderBottom","backgroundColor","cssOrderDistance","bottom","right","cssArrowRight","CrewsMarks","useSelector","c","key","crew_id","geometry","options","iconColor","OrderCrew","id","distance","useHover","hoverRef","useDispatch","ref","onClick","onSelectCrew","OrderCrews","useEffect","console","log","crews","crews_info","sort","b","car_model","car_color","OrderMap","width","useState","yMaps","setYMaps","mapInstance","setMapInstance","suggestView","setSuggestView","addSuggestItem","e","itemValue","addressString","coords","getCoordinates","bounds","properties","setBounds","events","add","remove","onLoad","SuggestView","provider","suggest","request","CircularProgress","clickPos","defaultState","controls","center","zoom","instanceRef","i","modules","iconCaption","cssOrderDetailBlock","marginTop","cssOrderDetailBlockLeft","textAlign","cssOrderDetailBlockRight","Order","React","open","vertical","horizontal","snackState","snackDescr","setSnackDescr","snackOpen","setSnackOpen","Snackbar","anchorOrigin","message","autoHideDuration","onClose","Grid","container","justify","item","xs","margin","onSubmit","preventDefault","TextField","required","error","label","onChange","event","target","car_number","Button","descr","order_id","code","createOrder","variant","disabled","App","Root","query","load","apikey","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.4eecb7ce.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { MapPosition } from \"../reducers/orderReducer\";\r\nimport { CrewInfo } from \"../components/Order/OrderService\";\r\n\r\nexport const ORDER_FORM_CHANGE = 'ORDER_FORM_CHANGE'; \r\nexport const SET_PLACEMARK_POSITION = 'SET_PLACEMARK_POSITION'; \r\nexport const SET_CREWS_INFO = 'SET_CREWS_INFO';\r\nexport const SET_SELECT_CREW_INFO = 'SET_CREW_INFO';\r\n\r\ntype OrderFormNames = 'address' | 'isValid';\r\n\r\nfunction setSelectCrew(crewInfo: CrewInfo) {\r\n    return (dispatch) => {\r\n        dispatch({\r\n            type: SET_SELECT_CREW_INFO,\r\n            crewInfo,\r\n        });\r\n    };\r\n}\r\n\r\nfunction setCrewsInfo(crewsInfo) {\r\n    return (dispatch) => {\r\n        dispatch({\r\n            type: SET_CREWS_INFO,\r\n            crewsInfo, \r\n        });\r\n    };\r\n}\r\n\r\nfunction orderFormChange(name: OrderFormNames, value: any) {\r\n    return (dispatch) => {\r\n        dispatch({\r\n            type: ORDER_FORM_CHANGE, \r\n            name,\r\n            value,\r\n        });\r\n    };\r\n}\r\n\r\nfunction setPlacemarkPos(position: MapPosition, data?: {text: string; color: string;}) {\r\n    return (dispatch) => {\r\n        if (data) {\r\n            dispatch({\r\n                type: SET_PLACEMARK_POSITION,\r\n                text: data.text,\r\n                color: data.color,\r\n                position,\r\n            });\r\n            return;\r\n        }\r\n\r\n        dispatch({\r\n            type: SET_PLACEMARK_POSITION,\r\n            position,\r\n            text: '',\r\n            color: 'gold',\r\n        });\r\n    };\r\n}\r\n\r\nexport {\r\n    setSelectCrew,\r\n    setCrewsInfo,\r\n    orderFormChange,\r\n    setPlacemarkPos,\r\n}","import { ORDER_FORM_CHANGE, SET_PLACEMARK_POSITION, SET_CREWS_INFO, SET_SELECT_CREW_INFO } from \"../actions/orderActions\";\r\nimport { CrewInfo } from \"../components/Order/OrderService\";\r\n\r\nexport type MapPosition = [number, number];\r\n\r\nexport type MapPlacemark = {\r\n    color: string;\r\n    text: string;\r\n    position: MapPosition | null;\r\n};\r\n\r\nexport type OrderState = {\r\n    form: {\r\n        address: string;\r\n        isValid: boolean;\r\n    };\r\n    map: {\r\n        clickPlacemark: MapPlacemark;\r\n    };\r\n    crewsInfo: CrewInfo[];\r\n    selectCrew: CrewInfo | null;\r\n};\r\n\r\nconst initialState: OrderState = {\r\n    form: {\r\n        address: '',\r\n        isValid: false,\r\n    },\r\n    map: {\r\n        clickPlacemark: {\r\n            color: 'gold',\r\n            text: '',\r\n            position: null,\r\n        },\r\n    },\r\n    crewsInfo: [],\r\n    selectCrew: null\r\n};\r\n\r\nfunction orderReudcer(state = initialState, action: any) {\r\n    switch (action.type) {\r\n        case SET_SELECT_CREW_INFO: {\r\n            state.selectCrew = action.crewInfo;\r\n            return {\r\n                ...state,\r\n            };\r\n        };\r\n\r\n        case SET_CREWS_INFO: {\r\n            state.crewsInfo = action.crewsInfo;\r\n            return {\r\n                ...state\r\n            };\r\n        };\r\n\r\n        case ORDER_FORM_CHANGE: {\r\n            state.form[action.name] = action.value;\r\n            return {\r\n                ...state,\r\n            };\r\n        };\r\n\r\n        case SET_PLACEMARK_POSITION: {\r\n            state.map.clickPlacemark.position = action.position;\r\n            state.map.clickPlacemark.text = action.text;\r\n            state.map.clickPlacemark.color = action.color;\r\n\r\n            return {\r\n                ...state,\r\n            };\r\n        };\r\n\r\n        default: {\r\n            return {\r\n                ...state,\r\n            };\r\n        };\r\n    }\r\n}\r\n\r\nexport {\r\n    orderReudcer,\r\n}","import { orderReudcer, OrderState } from \"./orderReducer\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nexport type State = {\r\n    order: OrderState,\r\n};\r\n\r\nconst createRootReducer = () => combineReducers({\r\n    order: orderReudcer,\r\n});\r\n\r\nexport {\r\n    createRootReducer,\r\n}","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport { createRootReducer } from '../reducers';\r\nimport logger from 'redux-logger'\r\nimport thunk from 'redux-thunk';\r\n\r\nconst store = createStore(\r\n    createRootReducer(), \r\n    compose(\r\n        applyMiddleware(\r\n            thunk,\r\n            logger,\r\n        ),\r\n    ),\r\n);\r\n\r\nexport {\r\n  store,\r\n}","import React, { CSSProperties } from \"react\";\r\nimport { FaTaxi } from 'react-icons/fa';\r\n\r\nconst cssSelectCrew: CSSProperties = {\r\n    border: '1px solid #000',\r\n    padding: '.5rem',\r\n    minWidth: '11rem',\r\n};\r\n\r\nconst cssSelectCrewLeft: CSSProperties = {\r\n    marginRight: '1rem',\r\n    display: 'inline-block',\r\n};\r\n\r\nconst cssSelectCrewRight: CSSProperties = {\r\n    verticalAlign: 'top',\r\n    display: 'inline-block',\r\n};\r\n\r\nconst cssSelectCrewTitle: CSSProperties = {\r\n    fontWeight: 800,\r\n    marginBottom: '.3rem',\r\n};\r\n\r\nconst cssSelectCrewColor: CSSProperties = {\r\n    fontSize: '.8rem'\r\n};\r\n\r\nconst cssSelectCrewNumber: CSSProperties = {\r\n    border: '1px solid #000',\r\n    padding: '.4rem',\r\n    borderRadius: '5px',\r\n};\r\n\r\nfunction SelectCrew({title, color, number}: {title: string, color: string, number: string}) {\r\n    return (\r\n        <div className='select-crew' style={ cssSelectCrew }>\r\n            <span style={ cssSelectCrewLeft }>\r\n                <FaTaxi style={ { fontSize: '2rem', color: '#c0c0c0' } } />\r\n            </span>\r\n\r\n            <span style={ cssSelectCrewRight }>\r\n                <div style={ cssSelectCrewTitle }>{ title }</div>\r\n                <div style={ cssSelectCrewColor }>{ color }</div>\r\n                <div style={ cssSelectCrewNumber }>{ number }</div>\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport {\r\n    SelectCrew,\r\n}","import { MapPosition } from \"../../reducers/orderReducer\";\r\n\r\nexport type CrewAdresses = {\r\n    address: string;\r\n    lat: number;\r\n    lon: number;\r\n};\r\n\r\nexport type CrewInfo = {\r\n    crew_id: number;\r\n    car_mark: string;\r\n    car_model: string;\r\n    car_color: string;\r\n    car_number: string;\r\n    driver_name: string;\r\n    driver_phone: string;\r\n    lat: number;\r\n    lon: number;\r\n    distance: number;\r\n};\r\n\r\ntype CrewsData = {\r\n    code: number;\r\n    descr: string;\r\n    data: {\r\n        crews_info: CrewInfo[];\r\n    };\r\n};\r\n\r\ntype SearchCrewData = {\r\n    source_time: number; // формат времени ГГГГММДДччммсс.\r\n    addresses: CrewAdresses[];\r\n};\r\n\r\ntype OrderCrewData = {\r\n    source_time: number;\r\n    crew_id: number;\r\n    addresses: CrewAdresses[];\r\n};\r\n\r\nexport type OrderResponse = {\r\n    code: number;\r\n    descr: string;\r\n    data: {\r\n        order_id: number;\r\n    };\r\n};  \r\n\r\nasync function getCrewsData(data: SearchCrewData): Promise<CrewsData> {\r\n    return new Promise((res, rej) => {\r\n        res({\r\n            // прикладной код ошибки.\r\n            \"code\": 0,\r\n            // описание.\r\n            \"descr\": \"OK\",\r\n            \"data\": {\r\n              \"crews_info\":[\r\n                {\r\n                  \"crew_id\": 123,\r\n                  \"car_mark\": \"Chevrolet\",\r\n                  \"car_model\": \"Lacetti\",\r\n                  \"car_color\": \"синий\",\r\n                  \"car_number\": \"Е234КУ\",\r\n                  \"driver_name\": \"Деточкин\",\r\n                  \"driver_phone\": \"7788\",\r\n                  \"lat\": 56.855532,\r\n                  \"lon\": 53.217462,\r\n                  \"distance\": 300\r\n                },\r\n                {\r\n                  \"crew_id\": 125,\r\n                  \"car_mark\": \"Hyundai\",\r\n                  \"car_model\": \"Solaris\",\r\n                  \"car_color\": \"белый\",\r\n                  \"car_number\": \"Ф567АС\",\r\n                  \"driver_name\": \"Петров\",\r\n                  \"driver_phone\": \"8899\",\r\n                  \"lat\": 56.860581,\r\n                  \"lon\": 53.209223,\r\n                  \"distance\": 123\r\n                },\r\n              ],\r\n            },\r\n        });\r\n    });\r\n}\r\n\r\nfunction createOrder({ source_time, crew_id, addresses }: OrderCrewData): OrderResponse {\r\n    console.log('createOrder source_time, crew_id, addresses', source_time, crew_id, addresses);\r\n\r\n    return {\r\n        descr: `Создан заказ #${crew_id}.`,\r\n        data: {\r\n            order_id: 12345,\r\n        },\r\n        code: 0,\r\n    };\r\n}\r\n\r\nasync function findCrews(address: string, position: MapPosition): Promise<CrewsData> {\r\n    // const date = new Date(Date.now());\r\n    // const dateStr = `${date.getFullYear} ${date.getMonth() + 1} ${date.getDay()} ${date.getHours()} ${date.getMinutes()} ${date.getSeconds()}`;\r\n\r\n    // ymaps.coordSystem.geo.getDistance([56.873259, 53.238826], [56.873259, 56.238826]);\r\n\r\n    const data: SearchCrewData = {\r\n        source_time: Date.now(),\r\n        addresses: [\r\n            {\r\n                address,\r\n                lat: position[0],\r\n                lon: position[1],\r\n            },\r\n        ],\r\n    };\r\n\r\n    return await getCrewsData(data);\r\n}\r\n\r\nfunction getAddressString(geoObject) {\r\n    if (!geoObject) return '';\r\n    const premise = geoObject.getPremise();\r\n    const premiseNumber = geoObject.getPremiseNumber();\r\n    const thoroughfare = geoObject.getThoroughfare();\r\n    const address = [premise || thoroughfare, premiseNumber];\r\n    return address.filter(Boolean).join(', ');\r\n}\r\n\r\nasync function getAddress(ymaps: any, position: MapPosition): Promise<string> {\r\n    const result = await ymaps.geocode(position);\r\n    const firstGeoObject = result.geoObjects.get(0);\r\n    const addressStr = getAddressString(firstGeoObject);\r\n\r\n    if (!firstGeoObject) {\r\n        return '';\r\n    }\r\n\r\n    return addressStr;\r\n}\r\n\r\nexport {\r\n    createOrder,\r\n    getAddressString,\r\n    getAddress,\r\n    findCrews,\r\n}","import { CSSProperties, useEffect } from \"react\";\r\nimport React from \"react\";\r\nimport { FaTaxi } from \"react-icons/fa\";\r\nimport { IoIosArrowForward } from \"react-icons/io\";\r\nimport { useHover } from '@umijs/hooks';\r\nimport { State } from \"../../../reducers\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { findCrews } from \"../OrderService\";\r\nimport { setCrewsInfo, setSelectCrew } from \"../../../actions/orderActions\";\r\nimport { Placemark } from \"react-yandex-maps\";\r\n\r\nconst cssOrderCrews: CSSProperties = {\r\n    border: '1px solid #000',\r\n    height: '20rem',\r\n    overflowY: 'auto',\r\n};\r\n\r\nconst cssOrderCrew = (isHover): CSSProperties => {\r\n    return {\r\n        cursor: 'pointer',\r\n        position: 'relative',\r\n        borderBottom: '1px solid #000',\r\n        padding: '.5rem',\r\n        backgroundColor: isHover ? 'rgba(0, 0, 0, 1)' : 'rgba(0, 0, 0, 0)',\r\n        color: isHover ? '#fff' : '#000',\r\n    };\r\n};\r\n\r\nconst cssOrderDistance: CSSProperties = {\r\n    position: 'absolute',\r\n    bottom: '.2rem',\r\n    right: '2rem',\r\n};\r\n\r\nconst cssArrowRight: CSSProperties = {\r\n    position: 'absolute',\r\n    right: '.3rem',\r\n    bottom: '.6rem',\r\n    fontSize: '1.4rem'\r\n};\r\n\r\nfunction CrewsMarks() {\r\n    const state: State = useSelector((state) => state || []);\r\n    const { crewsInfo } = state.order;\r\n    \r\n    return (\r\n        <div>\r\n            { crewsInfo.map(c => {\r\n                return <Placemark\r\n                    key={ c.crew_id }\r\n                    geometry={ [c.lat, c.lon] }\r\n                    options={ { iconColor: 'green' } }\r\n                />\r\n            }) }\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction OrderCrew({ id, name, color, distance }: {id: number, name: string; color: string; distance: number;}) {\r\n    const [isHover, hoverRef] = useHover<HTMLDivElement>();\r\n    const state: State = useSelector((state) => state || []);\r\n    const dispatch = useDispatch();\r\n\r\n    const onSelectCrew = (id: number) => {\r\n        dispatch(setSelectCrew(state.order.crewsInfo[id]));\r\n    };\r\n\r\n    return (\r\n        <div style={ cssOrderCrew(isHover) } ref={ hoverRef } onClick={ () => onSelectCrew(id) }>\r\n            <div style={ { display: 'inline-block', marginRight: '2rem' } }>\r\n                <FaTaxi style={ { fontSize: '2rem', color: isHover ? '#fff' : '#c0c0c0' } } />\r\n            </div>\r\n            <div style={ { display: 'inline-block' } }>\r\n                <div style={ { fontWeight: 500 } }>{ name }</div>\r\n                <div style={ { fontSize: '.7rem' } }>{ color }</div>\r\n            </div>\r\n            <div style={ cssOrderDistance }>\r\n                { `${distance} м` }\r\n            </div>\r\n            <div style={ cssArrowRight }>\r\n                <IoIosArrowForward />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction OrderCrews() {\r\n    const state: State = useSelector((state) => state || []);\r\n    const dispatch = useDispatch();\r\n    \r\n    const crewsInfo = state.order.crewsInfo;\r\n    const { clickPlacemark } = state.order.map;\r\n    const { address } = state.order.form;\r\n\r\n    useEffect(() => {\r\n        console.log('order-useEffect', clickPlacemark.position, state.order.form.isValid);\r\n        (async() => {\r\n            // Получение экипажей.\r\n            if (clickPlacemark.position && state.order.form.isValid && state.order.form.address) {\r\n                const crews = await findCrews(address, clickPlacemark.position);\r\n                dispatch(setCrewsInfo(crews.data.crews_info));\r\n                dispatch(setSelectCrew(crews.data.crews_info[0]));\r\n            } else {\r\n                dispatch(setCrewsInfo([]));\r\n            }\r\n        })();\r\n    }, [state.order.form.address, state.order.form.isValid]);\r\n\r\n    return (\r\n        <div>\r\n            <div style={ cssOrderCrews }>\r\n                {\r\n                    crewsInfo\r\n                    .sort((a, b) => a.distance - b.distance)\r\n                    .map((c, id) => <OrderCrew key={ c.crew_id } id={ id } name={ c.car_model } color={ c.car_color } distance={ c.distance } />) \r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport {\r\n    CrewsMarks,\r\n    OrderCrews,\r\n    OrderCrew,\r\n}","import { Map, Placemark, YMaps, withYMaps } from 'react-yandex-maps';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { orderFormChange, setPlacemarkPos, setCrewsInfo } from '../../../actions/orderActions';\r\nimport { State } from '../../../reducers';\r\nimport { MapPosition } from '../../../reducers/orderReducer';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { getAddress, findCrews, getAddressString } from '../OrderService';\r\nimport { CrewsMarks } from '../Crews';\r\n\r\nfunction OrderMap({ width, height }: {width: string; height: string;}) {\r\n    const dispatch = useDispatch();\r\n    const state: State = useSelector((state) => state || []);\r\n    const { order: { map: { clickPlacemark }, form } } = state;\r\n\r\n    const [yMaps, setYMaps] = useState<any>();\r\n    const [mapInstance, setMapInstance] = useState<any>();\r\n    const [suggestView, setSuggestView] = useState<any>();\r\n\r\n    useEffect(() => {\r\n        if (suggestView) {\r\n            const addSuggestItem = async (e) => {\r\n                const itemValue = e.get('item').value;\r\n                const result = await yMaps.geocode(itemValue);\r\n                const firstGeoObject = result.geoObjects.get(0);\r\n\r\n                const addressString = getAddressString(firstGeoObject);\r\n                const coords = firstGeoObject.geometry.getCoordinates();\r\n                const bounds = firstGeoObject.properties.get('boundedBy');\r\n\r\n                if (addressString) {\r\n                    dispatch(setPlacemarkPos(coords));\r\n                    dispatch(orderFormChange('address', addressString));\r\n                    dispatch(orderFormChange('isValid', true));\r\n                    \r\n                    // Масштабируем под координаты из поиска.\r\n                    mapInstance.setBounds(bounds);\r\n                    // ymaps.coordSystem.geo.getDistance([56.873259, 53.238826], [56.873259, 56.238826]);\r\n                } else {\r\n                    dispatch(orderFormChange('address', ''));\r\n                    dispatch(orderFormChange('isValid', false));\r\n                }\r\n            }\r\n\r\n            suggestView.events.add('select', addSuggestItem);\r\n\r\n            return () => {\r\n                suggestView.events.remove('select', addSuggestItem);\r\n            };\r\n        }\r\n    }, [suggestView]);\r\n\r\n    const onLoad = async (ymaps) => {\r\n        const suggestView = new ymaps.SuggestView('suggest', {\r\n            provider: {\r\n                    suggest: (request) => {\r\n                    return ymaps.suggest(request);  \r\n                }\r\n            }\r\n        });\r\n\r\n        setSuggestView(suggestView);\r\n        setYMaps(ymaps);\r\n    };\r\n\r\n    const onMapClick = (e) => {\r\n        const clickPos: MapPosition = e.get('coords');\r\n        dispatch(setPlacemarkPos(clickPos));\r\n        \r\n        if (yMaps && clickPos) {\r\n            (async () => {\r\n                if (!clickPlacemark.position) {\r\n                    return;\r\n                }\r\n\r\n                dispatch(orderFormChange('address', 'Поиск...'));\r\n                // Получаем адрес нажатой точки на карте.\r\n                const address = await getAddress(yMaps, clickPlacemark.position);\r\n\r\n                if (address) {\r\n                    dispatch(orderFormChange('address', address));\r\n                    dispatch(orderFormChange('isValid', true));\r\n                } else {\r\n                    dispatch(setPlacemarkPos(clickPos, {text: 'Адрес не найден', color: 'red'}));\r\n                    dispatch(orderFormChange('address', ''));\r\n                    dispatch(orderFormChange('isValid', false));\r\n                }\r\n\r\n                if (!clickPlacemark.position) {\r\n                    return;\r\n                }\r\n            })();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            { !yMaps && <CircularProgress /> }\r\n            <Map\r\n            \r\n                width={ width }\r\n                height={ height }\r\n                onLoad={ onLoad }\r\n                onClick={ onMapClick }\r\n                defaultState={{\r\n                    controls: ['zoomControl', 'fullscreenControl'],\r\n                    center: [56.873259, 53.238826],\r\n                    zoom: 9,\r\n                }}\r\n                instanceRef={(i) => {\r\n                    if (i) {\r\n                        setMapInstance(i);\r\n                    }\r\n                }}\r\n                modules={ ['control.ZoomControl', 'control.FullscreenControl'] }\r\n            >\r\n                { clickPlacemark.position && \r\n                    <Placemark\r\n                        geometry={ clickPlacemark.position } \r\n                        properties={{\r\n                            iconCaption: clickPlacemark.text,\r\n                        }}\r\n                        modules={['geoObject.addon.balloon']}\r\n                        options={ { iconColor: clickPlacemark.color } }\r\n                    />\r\n                }\r\n                <CrewsMarks />\r\n            </Map>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport {\r\n    OrderMap,\r\n}","import React from \"react\";\r\nimport { Grid, TextField, Button, Snackbar } from '@material-ui/core';\r\nimport './order.css';\r\nimport { CSSProperties } from \"@material-ui/core/styles/withStyles\";\r\nimport { SelectCrew } from \"./SelectCrew\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { orderFormChange } from \"../../actions/orderActions\";\r\nimport { State } from \"../../reducers\";\r\nimport { OrderMap } from \"./OrderMap\";\r\nimport { OrderCrews } from \"./Crews\";\r\nimport { useKeyPress } from '@umijs/hooks';\r\nimport { createOrder, CrewAdresses } from \"./OrderService\";\r\n\r\nconst cssOrderDetailBlock: CSSProperties = {\r\n    marginTop: '1rem',\r\n};\r\n\r\nconst cssOrderDetailBlockLeft: CSSProperties = {\r\n    marginRight: '1rem',\r\n    display: 'inline-block',\r\n    width: '10rem',\r\n    textAlign: 'right'\r\n};\r\n\r\nconst cssOrderDetailBlockRight: CSSProperties = {\r\n    display: 'inline-block',\r\n};\r\n\r\ntype SnackType = {\r\n    open: boolean;\r\n    vertical: 'top' | 'bottom';\r\n    horizontal: 'left' |'center' | 'right';\r\n};\r\n\r\nfunction Order() {\r\n    const state: State = useSelector((state) => state || []);\r\n    const { form, selectCrew } = state.order;\r\n    const dispatch = useDispatch();\r\n\r\n    const [snackState, setSnackState] = React.useState<SnackType>({\r\n        open: false,\r\n        vertical: 'top',\r\n        horizontal: 'center',\r\n    });\r\n    const [snackDescr, setSnackDescr] = React.useState<string>('');\r\n    const [snackOpen, setSnackOpen] = React.useState<boolean>(false);\r\n\r\n    const { vertical, horizontal, open } = snackState;\r\n\r\n    const onInputChange = (event: any) => {\r\n        const { name, value } = event.target;\r\n        dispatch(orderFormChange(name, value));\r\n    };\r\n\r\n    const onClick = (e) => {\r\n        if (!state.order.selectCrew) {\r\n            return;\r\n        }\r\n\r\n        const source_time = Date.now();\r\n        const crew_id = state.order.selectCrew.crew_id;\r\n        const addresses: CrewAdresses[] = [{\r\n            address: state.order.form.address,\r\n            lat: state.order.selectCrew.lat,\r\n            lon: state.order.selectCrew.lon,\r\n        }];\r\n\r\n        const result = createOrder({\r\n            source_time,\r\n            crew_id,\r\n            addresses,\r\n        });\r\n\r\n        setSnackDescr(result.descr);\r\n        setSnackOpen(true);\r\n    };\r\n\r\n    const onSnackClose = () => {\r\n        setSnackOpen(false);\r\n    }\r\n\r\n    return (\r\n        <div className='order'>\r\n            <Snackbar\r\n                anchorOrigin={{ vertical, horizontal }}\r\n                key={`${vertical},${horizontal}`}\r\n                open={ snackOpen }\r\n                message={ snackDescr }\r\n                autoHideDuration={ 4000 }\r\n                onClose={ onSnackClose }\r\n            />\r\n\r\n            <Grid container justify='center'> \r\n                <Grid item xs={ 10 }>\r\n                    <div style={ {margin: '1rem 0'} }>\r\n                        <div>Детали заказа</div>\r\n                        <hr />\r\n                        <div style={ cssOrderDetailBlock }>\r\n                            <span style={ cssOrderDetailBlockLeft }>Откуда:</span>\r\n                            <form style={ cssOrderDetailBlockRight } onSubmit={ (e) => e.preventDefault() }>\r\n                                <TextField \r\n                                    style={ {width: '30rem'} }\r\n                                    type='text' \r\n                                    required\r\n                                    error={ !form.isValid }\r\n                                    id=\"suggest\"\r\n                                    label=\"Введите корректный адрес\"\r\n                                    name='address'\r\n                                    onChange={ onInputChange }\r\n                                    value={ state.order.form.address }\r\n                                />\r\n                            </form>\r\n                        </div>\r\n                        <div style={ cssOrderDetailBlock }>\r\n                            <span style={ cssOrderDetailBlockLeft }>Подходящий экипаж:</span>\r\n                            <div style={ cssOrderDetailBlockRight }>\r\n                                { selectCrew ? \r\n                                    <SelectCrew \r\n                                        title={ selectCrew.car_model } \r\n                                        color={ selectCrew.car_color } \r\n                                        number={ selectCrew.car_number } /> \r\n                                    : \r\n                                    <span>Введите адрес или выберите на карте.</span> }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Grid>\r\n\r\n                <Grid item xs={ 7 }>\r\n                    <div className=\"order-map\">\r\n                        <OrderMap width={ '95%' } height={ '20rem' } />\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={ 3 }>\r\n                    <OrderCrews />\r\n                </Grid>\r\n                <Grid item xs={ 10 } style={{textAlign: 'center'}}>\r\n                    <Button \r\n                        onClick={ onClick }\r\n                        variant=\"outlined\" \r\n                        color=\"primary\" \r\n                        style={ {marginTop: '1rem', width: '25%'} }\r\n                        disabled={ !state.order.form.isValid }\r\n                    >\r\n                        Заказать\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport {\r\n    Order,\r\n}","import React, { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport './App.css';\r\nimport { Order } from './components/Order';\r\n\r\nfunction App() {\r\n  return (\r\n    <Order />\r\n  );\r\n}\r\n\r\nexport {\r\n  App,\r\n};\r\n","import React from \"react\";\r\nimport { store } from \"../../config/store\";\r\nimport { Provider } from 'react-redux';\r\nimport { App } from \"../../App\";\r\nimport { YMaps } from 'react-yandex-maps';\r\n\r\nfunction Root() {\r\n    return (\r\n        <Provider store={ store }>\r\n            <YMaps\r\n                query={{\r\n                    load: 'package.full',\r\n                    apikey: \"41265fe6-14d2-4266-8fa2-211b392338c8\",\r\n                }}\r\n            >\r\n                <App />\r\n            </YMaps>\r\n        </Provider>\r\n    );\r\n}\r\n\r\nexport {\r\n    Root,\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { App } from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Root } from './components/Root';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Root />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}